<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;

namespace ZedSharp
{
    public static class Tuples
    {
        <# foreach (var arity in Enumerable.Range(1, 6)) {
        var letters = Enumerable.Range(0, arity).Select(x => (char) (x + 'A'));
        var typeArgsCsv = String.Join(", ", letters);
        var tDotItemCsv = String.Join(", ", Enumerable.Range(0, arity).Select(x => "t.Item" + (x + 1))); #>

        public static Tuple<<#= typeArgsCsv #>, A2> AppendRight<<#= typeArgsCsv #>, A2>(this Tuple<<#= typeArgsCsv #>> t, A2 x)
        {
            return new Tuple<<#= typeArgsCsv #>, A2>(<#= tDotItemCsv #>, x);
        }

        public static Tuple<A2, <#= typeArgsCsv #>> AppendLeft<<#= typeArgsCsv #>, A2>(this Tuple<<#= typeArgsCsv #>> t, A2 x)
        {
            return new Tuple<A2, <#= typeArgsCsv #>>(x, <#= tDotItemCsv #>);
        }
<# foreach (var index in Enumerable.Range(1, arity)) { #>
        
        public static <#= ((char) (index - 1 + 'A')) #> Get<<#= typeArgsCsv #>>(this Tuple<<#= typeArgsCsv #>> t, Nat<#= index #> n)
        {
            return t.Item<#= index #>;
        }
            <# } #>
        <# } #>
    }
}
