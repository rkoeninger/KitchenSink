<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#    var arityMin = 0; #>
<#    var arityMax = 21; #>using System;
using System.Collections.Generic;
using System.Linq;

namespace ZedSharp
{
    /// <summary>Utility methods for building Dictionaries.</summary>
    public static class Dictionary
    {
		/// <summary>Creates a new Dictionary from a sequence of Tuples interpreted as key-value pairs.</summary>
        public static Dictionary<A, B> ToDictionary<A, B>(this IEnumerable<Tuple<A, B>> seq)
        {
            return seq.ToDictionary(x => x.Item1, x => x.Item2);
        }

		/// <summary>Creates a new Dictionary from a sequence of KeyValuePairs.</summary>
        public static Dictionary<A, B> ToDictionary<A, B>(this IEnumerable<KeyValuePair<A, B>> seq)
        {
            return seq.ToDictionary(x => x.Key, x => x.Value);
        }

        /// <summary>Creates a new Dictionary from the properties of an object.</summary>
		/// <remarks>Intended to be used with an anonymous object, but can be used with any object.</remarks>
        public static Dictionary<String, Object> Of(Object obj)
        {
            if (obj == null)
                return new Dictionary<String, Object>();

            return obj.GetType().GetProperties().Where(x => x.GetIndexParameters().Length == 0).ToDictionary(
                x => x.Name, x => x.GetValue(obj, null));
        }

<#  foreach (var arity in Enumerable.Range(arityMin, arityMax)) {
		var argsWithTypes = String.Join(", ", Enumerable.Range(0, arity).Select(arg => "A key" + arg + ", B val" + arg));
		var initializer = arity == 0 ? "()" : " {" + String.Join(", ", Enumerable.Range(0, arity).Select(x => "{ key" + x +", val" + x + " }")) + "}"; #>
		/// <summary>Creates a new Dictionary from the provided arguments. Arguments are provided in key-value-key-value order.</summary>
		/// <remarks>Key and value types can be inferred.</remarks>
        public static Dictionary<A, B> Of<A, B>(<#= argsWithTypes #>)
        {
            return new Dictionary<A, B><#= initializer #>;
        }

<#    } #>
    }
}