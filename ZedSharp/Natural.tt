<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<# var maxN = 32; #>

namespace ZedSharp
{

    public interface Natural
    {
        int Value { get; }
    }

    public class Nat0 : Natural
    {
        public static readonly Nat0 It = new Nat0();

        public static implicit operator int(Nat0 x)
        {
            return 0;
        }

        public int Value
        {
            get { return 0; }
        }

        public Nat1 Succ
        {
            get { return Nat1.It; }
        }
    }<#foreach (int n in Enumerable.Range(1, maxN - 1)) { #>


    public class Nat<#= n #> : Natural
    {
        public static readonly Nat<#= n #> It = new Nat<#= n #>();

        public static implicit operator int(Nat<#= n #> x)
        {
            return <#= n #>;
        }

        public int Value
        {
            get { return <#= n #>; }
        }

        public Nat<#= (n - 1) #> Pred
        {
            get { return Nat<#= (n - 1) #>.It; }
        }

        public Nat<#= (n + 1) #> Succ
        {
            get { return Nat<#= (n + 1) #>.It; }
        }
    }<#} #>


    public class Nat<#= maxN #> : Natural
    {
        public static readonly Nat<#= maxN #> It = new Nat<#= maxN #>();

        public static implicit operator int(Nat<#= maxN #> x)
        {
            return <#= maxN #>;
        }

        public int Value
        {
            get { return <#= maxN #>; }
        }

        public Nat<#= (maxN - 1) #> Pred
        {
            get { return Nat<#= (maxN - 1) #>.It; }
        }
    }
}